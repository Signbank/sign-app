{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Sign app wiki!","text":"<p>This page serves as a central hub for all documentation related to the Sign app. The Sign app is a mobile application that allows users to easily search and learn sign language, with access to a large database of signs from the Radboud University. In this wiki, you'll find information and documentation for developers who want to integrate with the app's API and contribute to the app's development. If you're a developer looking to get started, see the installation guide. For other items, see the options below.</p> Documentation <p>See the documentation for a better understanding of the whole sytem.</p> Documentation \u2934 Github <p>All the code and documentation is stored on a Github repository.</p> Github \u2934 Github issues <p>Any suggestions or problems with the system feel free to add an issue.</p> Issues \u2934 Functionality preview <p>For an idea of all the existing features see this page.</p> Functionality preview \u2934"},{"location":"api/","title":"API endpoint documentation","text":"<p>This API endpoint documentation is a comprehensive guide to all the possible requests that can be made to the Signbank and Sign app back-end using the RESTful design. The documentation outlines the data that each request expects, including query parameters and request bodies, as well as the data that each request will return and the structure in which this data is represented.</p>"},{"location":"api/#signbank","title":"Signbank","text":""},{"location":"api/#sign-info","title":"Sign info","text":"<p>The purpose of this request is to retrieve all the signs from the Signbank that match the user's search. It scans the specified dataset for translations that start with the user-specified search term. The response of this endpoint includes the names of the matching signs, as well as their corresponding thumbnail and video URL.</p> <p>Request type: GET</p> Arguments Required Type Description Search String The search term is used to filter the signs in the Signbank. It searches for all translations of a sign that start with the specified term. For example, searching for \"a\" will return all signs whose translations begin with \"a\", such as \"accept\". Dataset Integer The parameter specifies the dataset the user would like to use, such as NGT or ASL. The dataset is identified by its ID in the Signbank database, so NGT would be represented as \"5\" when handling this request. Results Integer The \"results\" parameter limits the number of signs that are returned to the specified value."},{"location":"api/#request-example","title":"Request example","text":"<pre><code>$ curl {signbank_base_url}/dictionary/gloss/api/?search=ac&amp;dataset=5&amp;results=2\n</code></pre>"},{"location":"api/#response-example","title":"Response example","text":"<pre><code>[\n  {\n    \"sign_name\": \"ACCEPTEREN-A\",\n    \"video_url\": \"glossvideo/NGT/AC/ACCEPTEREN-A-51.mp4\",\n    \"image_url\": \"glossimage/NGT/AC/ACCEPTEREN-A-51.png\"\n  },\n  {\n    \"sign_name\": \"ACCEPTEREN-B\",\n    \"video_url\": \"glossvideo/NGT/AC/ACCEPTEREN-B-3277.mp4\",\n    \"image_url\": \"glossimage/NGT/AC/ACCEPTEREN-B-3277.png\"\n  }\n]\n</code></pre>"},{"location":"api/#sign-info-by-id-list","title":"Sign info by ID list","text":"<p>The same information as the endpoint above can be retrieved using a POST request. In this case, a list of sign IDs can be included in the request body to retrieve information for multiple signs at once.</p> <p>Request type: POST</p> Arguments Required Type Description Post body List of integers The JSON list should contain a list of integers which are the IDs of the signs for which you want to retrieve the corresponding name and media information."},{"location":"api/#request-example_1","title":"Request example","text":"<pre><code>$ curl -X POST {signbank_base_url}/dictionary/gloss/api/ \n   -H \"Content-Type: application/json\"\n   -d '[14, 736, 519]'\n</code></pre>"},{"location":"api/#response-example_1","title":"Response example","text":"<pre><code>[\n  {\n    \"sign_name\": \"ACCEPTEREN-A\",\n    \"video_url\": \"glossvideo/NGT/AC/ACCEPTEREN-A-51.mp4\",\n    \"image_url\": \"glossimage/NGT/AC/ACCEPTEREN-A-51.png\"\n  },\n  {\n    \"sign_name\": \"ACCEPTEREN-B\",\n    \"video_url\": \"glossvideo/NGT/AC/ACCEPTEREN-B-3277.mp4\",\n    \"image_url\": \"glossimage/NGT/AC/ACCEPTEREN-B-3277.png\"\n  }\n]\n</code></pre>"},{"location":"api/#sign-app","title":"Sign app","text":""},{"location":"api/#search-by-sign-property","title":"Search by sign property","text":"<p>This endpoint can be used to find a sign by selecting properties. It returns a list of properties from which one can be selected to filter the possible signs. The endpoint expects a list of integers which correspond to the indexes of the selected items.</p> <p>For example, at first, you would send an empty list, and the API would return a list of properties of the first type. To select a property, you would make the request again and set the index of that property in a list. So, if you pick the third property, the request body would become [2]. If you then choose the first item, the request body would become [2, 0]. This process can continue until there are no more property types to select. When no more items can be selected, the API will return an empty list.</p> <p>For a more in depth explanation of the underlying structure see the documentation.</p> <p>Request type: POST</p> Arguments Required Type Description Post body List of integers The integers represent the index of the chosen property."},{"location":"api/#request-example_2","title":"Request example","text":"<pre><code>$ curl -X POST {sign_app_base_url}/search\n   -H \"Content-Type: application/json\"\n   -d '[4, 19]'\n</code></pre>"},{"location":"api/#response-example_2","title":"Response example","text":"<pre><code>[\n    {\n        \"identifier\": \"Neutrale ruimte\",\n        \"sign_ids\": [\n            2109\n        ]\n    },\n    {\n        \"identifier\": \"Variabel\",\n        \"sign_ids\": [\n            3091,\n            36752,\n            4042\n        ]\n    }\n]\n</code></pre>"},{"location":"documentation/","title":"Documentation","text":"<p>Here you will find the documentation for the Sign app. In this documentation the purpose and the functionality of the app is described. It will also show the deployment of the app and give an installation guide for people that want to contribute in developing the app.</p>"},{"location":"documentation/#introduction","title":"Introduction","text":"<p>The Sign app is designed for people who want to learn sign language. With the app, users can learn signs by watching videos. The app provides a publicly available interface for Signbank videos, along with lists of words that users can learn and a test their knowledge of the sign language.</p> <p>The backend uses Django 4.1 with Python 3.10, and the app is developed with Flutter, targeting Android and iOS phones. Signs are taken from Signbank, which connects to the app through a RESTful API.</p> <p>This document focuses on the design of the Sign app to provide a better understanding of how its different components work and communicate with each other. It should also offer some insight into the application's functionality and constraints, highlighting some of the decisions made based on these attributes.</p> <p>This document uses C4 model and other diagrams to illustrate the full scope of the application.</p>"},{"location":"documentation/#system-context","title":"System context","text":"<p>This page shows the most zoomed out view of the system. It provides an overview of the different systems used, including the Signbank which the Sign app utilizes to obtain sign language data. The user only interacts with the Sign app, which displays this data.</p> <p></p>"},{"location":"documentation/#system-containers","title":"System containers","text":"<p>As shown in the diagram below, the Sign app system comprises three containers: a mobile front-end that retrieves data from the Signbank, a back-end that serves data to the front-end, and an SQLite database that stores user data.</p> <p></p> <p>The back-end is hosted on the Ponyland cluster, see the Ponyland wiki for more information about the cluster and the deployment of the application.</p>"},{"location":"documentation/#system-components","title":"System components","text":"<p>The following diagram depicts the structure of the different systems used in the Sign app. Both the front-end and back-end follow the Model-View-Controller (MVC) pattern, although Django's implementation of the pattern differs slightly. Please refer to their FAQ for more information. To make the structure consistent between Flutter and Django, the Flutter code also follows the same pattern. This is expected to make it easier for newcomers to understand the structure.</p> <p>The majority of these components are not concrete classes, but rather an abstract layer. In the next section, the components will be described in more detail, including their functions and usages</p> <p></p> <p>The API endpoints documentation provides a comprehensive list of all the possible requests for Signbank and the Sign app back-end. It specifies the type of requests you can make, the data that the request expects, and the data that the request will return.</p> <p>The user interface documentation provides an overview of the layout of the Flutter views and their components.</p>"},{"location":"documentation/#code","title":"Code","text":"<p>In this section, important parts of the code will be highlighted. The code will be split into two parts: that from Flutter and Django. Both parts will have their respective class diagrams. The purpose of these diagrams is to show an overview of the code structure in concrete classes. They will also explain important functions and attributes in more detail after the class diagram.</p> <p>For clarity's sake, the class diagrams omit functions and attributes that do not add value to understanding the code base, such as getter, setter, and other methods.</p>"},{"location":"documentation/#flutter","title":"Flutter","text":"<p>In the class diagram for the Flutter code, some class associations or inheritance are left out to remove clutter. For example, the view classes inherit from the Dart \"StatefulWidget\" class. A \"StatefulWidget\" class is accompanied by a private \"State\" class, as is the norm in Flutter. All of these things are left out to make the diagram more readable and are represented by a single view class.</p> <p>It is recommended that if you are not familiar with the \"StatefulWidget\" and \"StatelessWidget\" classes from Flutter, you read their documentation first to get a basic understanding of the framework</p>"},{"location":"documentation/#view","title":"View","text":"<p>As mentioned previously, it is recommended that you examine the documentation for the StatelessWidget and StatefulWidget classes in Flutter before reviewing the code, to gain a basic understanding of the framework. The view classes inherit from a widget class, which means that they override a build method to display the user interface.</p>"},{"location":"documentation/#callback-method","title":"Callback method","text":"<p>A view that uses a controller should implement a callback method. The purpose of this method is to update the UI when the controller loads or changes data. The simplest version of this function is to call setState in the callback function or pass the setState function to the controller. The setState function reloads the UI and shows the updated data. Read the Flutter documentation here for more information.</p>"},{"location":"documentation/#controller","title":"Controller","text":"<p>The controller class is responsible for managing the data in the view. It retrieves the data from the server when it is not present. Once the data is received from the server, the controller updates the view by calling the callback function that was set in the view, as mentioned above.</p>"},{"location":"documentation/#abstract-controller","title":"Abstract Controller","text":"<p>This class is the base for all controllers. It provides methods that child controller classes can use to make HTTP requests to the server. By creating a class that handles these requests, it is possible to remove duplicate code and have a consistent structure. Another advantage is that it allows for implementing error handling in a singular place.</p> <p>It is an abstract class, which means specific controller implementations should inherit from it.</p> <p>All of the methods in this class are generic, which means they can be used with both model objects and primitive types, which makes it more flexible. In the next section, we will provide a more detailed explanation of these methods.</p>"},{"location":"documentation/#request-methods","title":"Request methods","text":"<p>The GET and POST request methods use the dart HTTP library to make a request. These methods require an endpoint URL and a function that can create an instance of type T from JSON. Depending on the type of request, additional parameters may be required, such as a request body for a POST request.</p> <p>These methods return a future of type T?. A Future is the result of an asynchronous function. You can learn more about futures and async programming in dart here.  When the method completes, it returns an instance of type T?.  The question mark indicates that the instance is allowed to be null.  This means that controller implementations should check if the returned data is null and handle the situation appropriately. When the return value is null, it indicates that something went wrong and the base controller should display an error message to the user.</p> <p>You can specify the type of the method in the same way as you would specify the type of a class instance. For example, the following code makes a GET request that returns a list of signs:</p> <pre><code>returnData = await super.getRequest&lt;List&lt;Sign&gt;&gt;(\n          url: signBankBaseUrl + endpointUrl, \n          fromJsonFunction: Sign.listFromJson); \n</code></pre>"},{"location":"documentation/#parse-response","title":"Parse response","text":"<p>The request methods call the parseResponse function, which checks if the request was successful.  If successful, it attempts to parse the JSON into an object by using jsonDecode and the given fromJson function.</p> <p>The reason for providing the fromJson function as a parameter is to make the code more flexible. This way, you can use a primitive type, an object, or for example list of objects, and you only need to adjust the function accordingly.</p> <p>If the request or the parsing of an object fails, this function returns null and displays an error message to the user.</p>"},{"location":"documentation/#controller-implementation","title":"Controller implementation","text":"<p>Controller implementations such as the SignListController and PropertyListController inherit from the Controller class. These classes are specific types of controllers that manage the model and update the view when the data is loaded. They also specify which endpoint to call to receive the data.</p> <p>To retrieve data from the server, these implementations use the request methods provided by the abstract controller class.</p>"},{"location":"documentation/#model","title":"Model","text":"<p>The model is a simple class object that represents a domain or a data request structure. In most cases, it is recommended to create a \"fromJson\" constructor or a \"toJson\" method that allows for serialization of the object using the \"jsonDecode\" and \"jsonEncode\" methods. Of course, if there is no need to serialize the object, then it should not implement these methods.</p> <p>The model is a simple class object that represents a domain or a data request structure. In most cases it is recommended to create \"fromJson\" constructor or \"toJson\" method which allows for serialization of the object, with \"jsonDecode\" and \"jsonEndocde\" methods. Of course if there is no need to serialize the object that it should not implement these methods.</p>"},{"location":"documentation/#django","title":"Django","text":"<p>In this section, the backend code will be discussed. Django also uses a type of MVC for its code structure. Because there are multiple Django applications, that means there are also multiple view and model classes, and the code will be separated into these applications. Basic Django features like the urls.py file will not be discussed here unless they deviate from the norm.</p> <p>To make creating an API in Django easier the Django REST framework is used.</p>"},{"location":"documentation/#view_1","title":"View","text":"<p>The view is responsible for handling the request from the front-end. The endpoint URL is set in the URL file, which points to this view and a specific function. For all possible requests, please refer to the API documentation.</p> <p>This view expects an HTTP request type and will return an HTTP response with a list of properties as the body.</p>"},{"location":"documentation/#nodeserializer","title":"NodeSerializer","text":"<p>The serializers class is a feature form the Django REST framework and is responsible for being able to serialize the Node class.</p>"},{"location":"function_preview/","title":"Functionality overview","text":"<p>Welcome, on this page you'll find a preview video showcasing all the functionality that exists in this  application. This is meant to give a brief overview over the apps features.</p>"},{"location":"function_preview/#register-a-user","title":"Register a user","text":""},{"location":"function_preview/#login","title":"Login","text":""},{"location":"function_preview/#search-sign-by-word","title":"Search sign by word","text":""},{"location":"function_preview/#create-a-quiz","title":"Create a quiz","text":""},{"location":"function_preview/#delete-a-quiz","title":"Delete a quiz","text":""},{"location":"function_preview/#edit-a-quiz","title":"Edit a quiz","text":""},{"location":"function_preview/#take-a-quiz","title":"Take a quiz","text":""},{"location":"installation_guide/","title":"Installation guide","text":"<p>Welcome to the Sign app developers team! This guide will assist you in setting up your development environment.</p>"},{"location":"installation_guide/#requirements-flutter-and-python","title":"Requirements Flutter and Python","text":"<p>Here are all the items that must be present on your local machine to get started. Of course, if you only want to work on one part, not all items are necessary. For example, if you only want to work on the app, you only need to have Flutter installed.</p> <p>We're assuming that you've got Git and an IDE all set up. If you're not sure which IDE to use, no worries! We recommend PyCharm for Python and Android Studio for Flutter.</p> <ol> <li> <p>Install the Flutter SDK from the official Flutter website.    Choose the link for your operating system and follow the instructions.    Or use Android studio to install Flutter.</p> </li> <li> <p>Make sure you have Python installed.     Check your Python version with the following command    <pre><code>python --version </code></pre>    Version 3.8, 3.9, 3.10 and 3.11 are acceptable as these versions are compatible with Django 4.1</p> </li> <li> <p>Check if pip is installed with the following command:    <pre><code>pip --version\n</code></pre>    If pip is not installed look at the official pip website for an installation guide for you operating system.</p> </li> <li> <p>Optional but recommended is installing a virtual environment for python like virtualenv.</p> </li> </ol>"},{"location":"installation_guide/#setting-up-the-project","title":"Setting up the Project","text":"<ol> <li>Clone or download the project source code from the project's GitHub repository.    For example:    <pre><code>git clone git@github.com:Signbank/sign-app.git\n</code></pre></li> </ol>"},{"location":"installation_guide/#flutter","title":"Flutter","text":"<ol> <li> <p>Set up the Flutter app by opening the project folder in a code editor and running flutter pub get in the terminal to install any required packages.</p> </li> <li> <p>In the Flutter app code, update the url_config file to switch between localhost and the server. For example:    <pre><code>bool _signAppLocalhost = true\n</code></pre>    This will make sure the app uses the local Django server.</p> </li> <li> <p>Run the Flutter app on an emulator or physical device by running flutter run in the terminal or through Android studio. The app should be able to communicate with the local Django server and fetch data from the API endpoints.</p> </li> </ol>"},{"location":"installation_guide/#django","title":"Django","text":"<ol> <li> <p>Create a virtual environment    <pre><code>virtualenv env </code></pre></p> </li> <li> <p>Activate the virtual environment    <pre><code>source env/bin/activate\n</code></pre></p> </li> <li> <p>Set up the Django backend by navigating to the backend folder (called django) in the terminal and running python manage.py migrate to create the database tables. Optionally, you can create a superuser account by running python manage.py createsuperuser.</p> </li> <li> <p>Install the required packages by running the following command:    <pre><code>pip -r install requirements.txt\n</code></pre></p> </li> <li> <p>Set up Django secrete key by creating a .env file in the signapp directory.    You can create this file with the following command on unix systems:    <pre><code>touch signapp/.env\n</code></pre>    NOTE: It is a hidden file so enable hidden files in your file explorer or use ls -a command to see it. </p> </li> <li> <p>Add the following line to the .env file:    <pre><code>SECRET_KEY = 'django-insecure-super-ultra-secret-key'\n</code></pre>    For local development the key can be any string.</p> </li> <li> <p>Run the Django server by running python manage.py runserver in the terminal. The server will start at http://localhost:8000/.</p> </li> </ol>"},{"location":"installation_guide/#documentation","title":"Documentation","text":"<ol> <li> <p>Install MkDocs Material with the following command:    <pre><code>pip install mkdocs-material\n</code></pre></p> </li> <li> <p>Run the server:    <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>Edit and save the documentation markdown files and see you changes at http://localhost:8000/.</p> </li> </ol>"},{"location":"installation_guide/#server","title":"Server","text":"<ol> <li>Follow these steps to setup apache on the LXD container. On step 7 add the folliwing line instead of the one in the guide:</li> </ol> <pre><code>ProxyPass /api http:localhost:8000/\n</code></pre> <p>This redirects all api traffic to Django localhost.</p> <ol> <li> <p>Build a Flutter web app with the following command: <pre><code>flutter build web\n</code></pre></p> </li> <li> <p>Place the contents of the flutter web build on the server in the /var/www/html directory and remove the default index.html.</p> </li> </ol>"},{"location":"requirements/","title":"Rrequirements","text":""},{"location":"requirements/#requirements","title":"Requirements","text":"<p>This section presents the functional requirements in a high-level use-case diagram, followed by a description of the non-functional requirements based on the ISO/IEC 25010 standard. Only the most relevant non-functional requirements for this application are discussed in this document.</p> <p>The high-level use cases will be described in more detail in the next section.</p> <p>The stakeholders for this project are the developers at Humanities lab and Onno Crasborn. The primary and currently only relevant actor for the functional requirements is the user.</p>"},{"location":"requirements/#high-level-use-case-diagram","title":"High-level Use Case diagram","text":"<p>In the diagram below show the main functional components of the application. </p> <p></p>"},{"location":"requirements/#non-functional-requirements","title":"Non functional requirements","text":"<p>The following is a list of non-functional requirements that the system needs to meet, arranged in order of priority.</p>"},{"location":"requirements/#usability","title":"Usability","text":"Code Type Description U-1a Learnability The system should have a low learning curve, allowing users to quickly become proficient with its use U-1b Learnability The system should allow users to discover features and functions through intuitive navigation and exploration U-2 Operability The system should have a clear and straightforward user interface that is easy to understand and use U-3a User error protection The system should validate user inputs to ensure they are in the correct format and within the specified range U-3b User error protection The system should provide clear and concise error messages that explain why an error has occurred and how to correct it U-4a User interface aesthetics The system should have a visually appealing design, using colors, typography, and imagery that are consistent with the brand and appealing to users U-4b User interface aesthetics The system should have a clean and uncluttered user interface that is easy to navigate and understand"},{"location":"requirements/#maintainability","title":"Maintainability","text":"Code Type Description M-1 Modularity Components should be interchangeable, allowing different components to be substituted for each other, if needed M-2 Reusability The system should be designed to be easily reusable, with clear interfaces and well-defined functionality M-3a Analysability The system should have clear and well-documented architecture, with a clear understanding of the relationships between components M-3b Analysability The system should have clear and well-documented testing and quality assurance processes, to support analysis of system performance and reliability M-4a Modifiability The system should be modular, with components that can be easily added, removed, or modified M-4b Modifiability The system should have clear and well-documented interfaces, to support integration and extension M-5a Testability The system should be designed with testability in mind, with clear separation between components and well-defined functionality M-5b Testability The system should have clear and well-documented testing processes and tools, to support efficient and effective testing"},{"location":"requirements/#security","title":"Security","text":"<p>All the data used from Signbank is publicly available, and the aim is to minimize the storage of user data. To create a personal list, the user needs to provide identifying information, such as login credentials, which makes this information particularly sensitive and critical to protect. Although security is a concern for all data, it is particularly critical for sensitive information.</p> <p>To ensure the security of the server against attacks, best practices from Django will be followed.</p> Code Type Description S-1a Confidentiality The system should use strong encryption for sensitive data transmission and storage S-1b Confidentiality The system should implement access controls to restrict access to sensitive information based on roles and permissions"},{"location":"requirements/#performance-efficiency","title":"Performance efficiency","text":"Code Type Description PE-1 Time behaviour The system should load content in less than 3 seconds and should target under 1.3 seconds 12 PE-2 Resource utilization Network request should be less than 500 KB in size 2 PE-3 Capacity The system should be designed with scalability in mind, allowing it to handle increases in capacity requirements, such as storage and network data, as needed"},{"location":"requirements/#compatibility","title":"Compatibility","text":"Code Type Description C-1a Co-existence The system should be compatible with other systems and technologies in the shared environment C-1b Co-existence The system should follow established standards and protocols for communication and data exchange with other systems C-2 Interoperability The system should provide mechanisms for exchanging data, such as APIs, to allow other systems to access and use its data"},{"location":"requirements/#portability","title":"Portability","text":"Code Type Description P-1a Installability The system should be packaged in a way that supports easy and efficient installation and deployment P-1b Installability The system should have clear and well-documented installation instructions, to support users and administrators in the installation process P-2 Replaceability The system should be designed with modular architecture, to allow for the easy replacement of individual components and features"},{"location":"requirements/#reliability","title":"Reliability","text":"<p>The reliability of the system is not a priority because Signbank does not prioritize reliability and may experience downtime, which may result in the Sign app being unable to access information from Signbank. While this could temporarily affect the user's ability to use the app, it is deemed an acceptable trade-off given the nature and priorities of the project. Therefore, the system is designed with low availability and low fault tolerance.</p> <p>1: Load times assumes the user has a 3G or better internet connection. \u21a9</p> <p>2: Numbers are based on Google's best practices. \u21a9\u21a9</p>"},{"location":"use_cases/","title":"Use cases","text":""},{"location":"use_cases/#use-case-description","title":"Use-case Description","text":"<p>Here the high-level use-cases are described here in a fully dressed use-case form. This is done to get a better understanding of the functional requirements of the application.</p> <p>The fully dressed use cases presume that the user has already installed the system and accessed the home page.</p>"},{"location":"use_cases/#search-for-a-sign","title":"Search for a sign","text":"<p>Below, you find the use-case \"Search for a sign,\" which consists of two parts: searching for a sign with a word and searching for a sign through the use of hand shapes and location of the hands.</p>"},{"location":"use_cases/#search-for-a-sign-with-a-word","title":"Search for a sign with a word","text":"<p>The user wants to translate a word from their language into their chosen sign language.</p> Primary actor User Brief Description The user wants to know how to do a specific word in a sign language. So the user searches for that word and gets a list of videos back depicting how to perform that sign. Pre conditions The user has access to the system and the system is functional. Post conditions The user can view a video of the selected sign. Main Succes Scenario Actor Action System Responsibility 1. The user selects the search button.  2. The system shows an input field.  3. The user enters their search query in the input field. 4. The system shows a list with all the signs that match the search query. 5. The user selects one of the signs from the list. 6. The system shows the video of the selected sign. Alternative Scenario 4a. The system can't find any signs matching the search query and informs the user. 4b. The user stops searching or tries again and then the use case continues at step 1."},{"location":"use_cases/#search-for-a-sign-by-its-properties","title":"Search for a sign by its properties","text":"<p>The user wants to know the meaning of a sign.</p> Primary actor User Brief Description The user wants to know the meaning of a sign in their language. The user can search for the sign by giving information of the sign like the location, number of hands, movement direction and hand shape. If all these criteria match a specific sign the user will be redirected to a video page of the selected sign. Pre conditions The user has access to the system and the system is functional. Post conditions The user can view a video of the selected sign. Main Succes Scenario Actor Action System Responsibility 1. The user navigates to the correct search page. 2. The system shows multiple options for the location where the sign could take place, such as the head or the stomach. 3. The user selects a location. 4. The system asks how many hands where used for the sign. 5. The user gives the amount of hands used. 6. The system shows different movement directions for the sign. 7. The user selects a movement direction that corresponds to the sign. 8. The system shows multiple hand shapes that could be used in the sign. 9. The user selects a hand shape. 10. The system shows information of the sign that matches the given input. Alternative Scenario 4a/6a/8a The system has found a limited number of signs matching the given input and shows a list of these signs instead of asking for more options. 4b/6b/8b The user selects a sign from the list. 4c/6c/8c The system shows information of that sign. 10a. The can't find any signs matching the given input. 10b. The system discards the last given input and shows all the now matching signs. If there are no matching sign the system repeats this step. 10c. The user selects a sign from the given list. If no signs match the users intent than the user can stop searching or tries again and the use case starts at step 1."},{"location":"use_cases/#sign-language-learning-quiz","title":"Sign language learning quiz","text":"Primary actor User Brief Description      The user can access a list of signs and select which signs they want to practice.     The quiz will present a series of questions, each showing a sign, and the user must select the correct meaning from a list of multiple-choice answers.     After each question, the quiz will provide feedback to the user, indicating whether their answer was correct or incorrect, and will also provide the correct answer if the user answered incorrectly.     If users make mistakes during the quiz, they have the opportunity to retry those signs once the quiz is finished.      Pre conditions The user has access to a list of signs to learn. Post conditions The user progression of the selected list is saved. Main Succes Scenario Actor Action System Responsibility 1. The user navigates to the sign list page. 2. The system shows with all the list available to the user. 3. The user selects a list from which they would like to learn the signs. 4. The system navigates to the quiz page of the first new sign. 5. The system shows a video and asks the user to identify the sign in the video. 6. The user tries to identify the sign. 7. The user confirms their selection. 8. The system shows that the selection of the user was correct. 9. The system asks the users if they would like to continue. 10. The user confirms that they would like to continue. 11. The system goes to the next sign in the list. The use case continues at step 5. 12. The system will indicate to the user that they have completed the list once they have viewed all signs. Alternative Scenario 8a. The system shows that the selection of the user is wrong and adds this sign to a list of signs that the user did not get right. 12a. The system navigates to the first sign the user got wrong. The use case continues at step 5 and repeats for all the signs the user got wrong."},{"location":"user_interface_sketches/","title":"User interface sketches","text":"<p>The rough sketches of the user interfaces and their components will be presented in this section. These sketches provide an overview of the application's appearance, which components the front-end uses, and navigation routing through the app.</p>"},{"location":"user_interface_sketches/#home-page","title":"Home page","text":"<p>This is the initial landing page that the user encounters upon opening the app. The user can start searching for a sign, learn some signs, manage their personal sign list, and access the app settings through a drawer from this page.</p> <p></p> <ol> <li>A hamburger button that opens a drawer allowing the user to navigate to different settings pages.</li> <li>A component that initiates the learning feature.</li> <li>A component that navigates to a page where the user can manage their personal list of signs.</li> <li>A floating action button (FAB) that opens a dialog component, allowing the user to initiate the search function.</li> </ol>"},{"location":"user_interface_sketches/#search-dialog","title":"Search dialog","text":"<p>This dialog component is shown when the user presses the FAB in the home page. From here the user can start the search by property use case or search by word via the input field.</p> <p></p> <ol> <li>A button that navigates to the \"Search by Property\" page</li> <li>An input field where the user can enter a word to be translated to a sign</li> <li>A button that starts the search function using the input from #2</li> <li>A back button that closes the dialog.</li> </ol>"},{"location":"user_interface_sketches/#signproperty-list","title":"Sign/Property list","text":"<p>This page displays a list of items, which can include information about signs or sign properties. The action taken when a user taps on an item can vary depending on the use case. For more detailed information about the exact flow, please refer to the fully dressed use cases.</p> <p></p> <ol> <li>A back button that closes the page and returns the user to the home page.</li> <li>An item that displays an image or name of the item. Selecting this component will navigate the user to the video page or refresh this page with new data.</li> </ol>"},{"location":"user_interface_sketches/#video-page","title":"Video page","text":"<p>On this page, users can view a video and accompanying information related to a specific sign.</p> <p></p> <ol> <li>A back button that returns the user to the list page when clicked</li> <li>The video player that displays the video of the sign</li> <li>A section that shows additional information about the sign.</li> </ol>"},{"location":"user_interface_sketches/#video-player","title":"Video player","text":"<p>This component shows the video player with its UI elements. It is designed as a separate component from the video page to allow its usage in other parts of the app.</p> <p></p> <ol> <li>A Play/Pause button that starts or stops the video from playing.</li> <li>A Slow Motion button that decreases the video speed.</li> <li>A Fullscreen button that enlarges the video to fullscreen.</li> </ol>"},{"location":"user_interface_sketches/#quiz-page","title":"Quiz page","text":"<p>On this page, users can view a video of a sign and has to give the meaning of that sign.</p> <p></p> <ol> <li>A back button that returns the user to the home screen page when clicked</li> <li>The video player that displays the video of the sign</li> <li>A list of multiple choice answers that the user can select</li> <li>A button that check the answer given by the user</li> </ol>"}]}