"""Module for use of graph with different sign properties"""
import json
import numpy as np


class Graph:
    """
    This class manages the different sign properties for the search by properties feature.
    The different properties are stored in their respective lists and can be managed by the different methods in this class.

    A property is a node of the graph and has at least two outgoing edges.
    These edges are the properties that are all used in a sign.
    """

    def __init__(self):
        self.nodes = []

    def create_graph_from_file(self, file_path):
        """
        This function creates the graph from a file that is
        generated by the data scripts.
        It is based of the different sign properties and
        relevance base on the value in that file.
        """

        if not file_path.exists():
            return

        with open(file_path, 'r', encoding='utf-8') as file:
            dic_of_properties = json.load(file)

        # Add a list for every different property
        list_data = list(dic_of_properties.values())
        for i in range(len(list_data[0])-1):
            self.nodes.append([])

        for item in list_data:
            current_item_nodes = []
            for i, value in enumerate(item):
                if i == 0:
                    weight = value
                    continue

                node = Node(value, i-1)
                node = self.add_node(node)
                current_item_nodes.append(node)

            for node in current_item_nodes:
                for other_node in current_item_nodes:
                    if node != other_node:
                        node.add_edge(Edge(other_node, weight))

    def add_node(self, new_node):
        """
        Adds a new node to the correct list
        """
        node_list = self.nodes[new_node.group]

        node = self.get_node_from_list(new_node, node_list)

        if node is not None:
            return node

        node_list.append(new_node)
        return new_node

    def get_node_from_list(self, new_node, node_list):
        """
        Checks if the node is already in the list and return it if it does
        """
        for node in node_list:
            if node.identifier == new_node.identifier:
                return node

        return None

    def pick_property_set(self, list_of_chosen_nodes):
        """
        Pick the best property based on already chosen nodes
        """

        for node in list_of_chosen_nodes:
            node = self.get_node_from_list(node, self.nodes[node.group])

        match len(list_of_chosen_nodes):
            case 0:
                return self.pick_first_set()
            case 1:
                return self.pick_second_set(list_of_chosen_nodes[0])
            case 2:
                return self.pick_third_set(list_of_chosen_nodes[0], list_of_chosen_nodes[1])

    def pick_first_set(self):
        """
        Returns the list of nodes that has the most even spread
        """
        spread_values = []

        for node_list in self.nodes:
            spread_values.append(self.calculated_set_spread(node_list))

        index_best_set = 0

        for i, spread in enumerate(spread_values):
            if spread < spread_values[index_best_set]:
                index_best_set = i

        return self.nodes[index_best_set]

    def pick_second_set(self, picked_node):
        """
        Pick the best spread properties from all the outgoing edges
        from the chosen node
        """
        set_of_weights = []

        picked_node.edges.sort(reverse=True)

        first_group = picked_node.edges[0].node.group
        second_group = picked_node.edges[-1].node.group

        current_group = first_group

        temp_list = []
        for edge in picked_node.edges:
            if edge.node.group != current_group:
                current_group = edge.node.group
                set_of_weights.append(temp_list)
                temp_list = []

            temp_list.append(edge.weight)

        set_of_weights.append(temp_list)

        first_set_spread = np.std(set_of_weights[0]) * \
            np.ptp(set_of_weights[0])
        second_set_spread = np.std(set_of_weights[1]) * \
            np.ptp(set_of_weights[1])

        if first_set_spread < second_set_spread:
            return [x.node for x in picked_node.edges
                    if x.node.group == first_group]

        return [x.node for x in picked_node.edges
                if x.node.group == second_group]

    def pick_third_set(self, first_node, second_node):
        """
        This function returns all the nodes
        that are in the first and second node
        """
        return [x.node for x in second_node.edges if x in first_node.edges]

    def calculated_set_spread(self, node_list):
        """
        Looks to all the weights form all edges of the node list
        and returns the spread of these weights.
        """
        weight_list = []

        for node in node_list:
            weight_list += [x.weight for x in node.edges]

        return np.std(weight_list) * np.ptp(weight_list)

    def __eq__(self, other):
        if Graph != type(other):
            return False

        if self.nodes != other.nodes:
            return False

        return True

    def __str__(self):
        return_string = ""

        for node_list in self.nodes:
            for node in node_list:
                return_string = return_string + str(node) + "\n"

        return return_string


class Node:
    """
    This class represents a property in the graph
    It holds a list of edges that represent all
    the other properties that are used in the same
    sign as this property
    """

    def __init__(self, identifier, group):
        self.identifier = identifier
        self.group = group
        self.edges = []

    def add_edge(self, new_edge):
        """
        This method checks if this node already contains
        the same edge.
        This make sure there are no duplicate edges
        """
        for edge in self.edges:
            if edge == new_edge:
                edge.weight += new_edge.weight
                return edge.node

        self.edges.append(new_edge)
        return new_edge.node

    def __eq__(self, other):
        if Node != type(other):
            return False

        if self.identifier != other.identifier:
            return False

        if self.group != other.group:
            return False

        if self.edges != other.edges:
            return False

        return True

    def __lt__(self, other):
        if Node != type(other):
            return False

        return self.group < other.group

    def __str__(self):
        return_string = f"Node Id:{self.identifier}, group:{self.group}"
        for edge in self.edges:
            return_string += f"\n       Edge: {edge}"

        return return_string


class Edge:
    """
    An edge represents the link between two properties that er used in the same sign
    """

    def __init__(self, node, weight):
        self.node = node
        self.weight = weight

    def __eq__(self, other):
        if Edge != type(other):
            return False

        # compare values of nodes instead of
        # nodes self to avoid possible infinite recursion
        if self.node.identifier != other.node.identifier:
            return False

        if self.node.group != other.node.group:
            return False

        return True

    def __lt__(self, other):
        if Edge != type(other):
            return False

        return (self.node.group, self.weight) < (other.node.group, other.weight)

    def __str__(self):
        return f"Weight:{self.weight}, \
               To: id:{self.node.identifier} group:{self.node.group}"
