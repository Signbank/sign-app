"""Module for use of graph with different sign properties"""
import json
from functools import reduce
from operator import iconcat
import numpy as np


class Graph:
    """
    This class manages the different sign properties for the search by properties feature.
    The different properties are stored in their respective lists and can be managed by the different methods in this class.

    A property is a node of the graph and has at least two outgoing edges.
    These edges are the properties that are all used in a sign.
    """

    def __init__(self):
        self.nodes = []

    def create_graph_from_file(self, file_path):
        """
        This function creates the graph from a file that is
        generated by the data scripts.
        It is based of the different sign properties and
        relevance base on the value in that file.
        """

        if not file_path.exists():
            return

        with open(file_path, 'r', encoding='utf-8') as file:
            list_of_signs = json.load(file)

        # Number of items that are not the properties
        # This has to be subtracted to the index
        n_p = 2

        # Add a list for every different property
        for i in range(len(list_of_signs[0])-n_p):
            self.nodes.append([])

        for item in list_of_signs:
            current_item_nodes = []
            for i, value in enumerate(item):
                if i == 0:
                    sign_id = value
                    continue
                if i == 1:
                    weight = value
                    continue

                node = Node(value, i-n_p, nr_of_sets=len(self.nodes))
                node.sign_ids.append(sign_id)
                node = self.add_node(node)
                current_item_nodes.append(node)

            for node in current_item_nodes:
                for other_node in current_item_nodes:
                    if node != other_node:
                        node.add_edge(Edge(other_node, weight))

    def add_node(self, new_node):
        """
        Adds a new node to the correct list
        """
        node_list = self.nodes[new_node.group]

        node = self.get_node_from_list(new_node, node_list)

        if node is not None:
            node.add_sign_id(new_node.sign_ids[0])
            return node

        new_node.index = len(node_list)
        node_list.append(new_node)
        return new_node

    def get_node_from_list(self, new_node, node_list):
        """
        Checks if the node is already in the list and return it if it does
        """
        for node in node_list:
            if node.identifier == new_node.identifier:
                return node

        return None

    def pick_property_set(self, list_of_node_index):
        """
        Pick the best property based on already chosen nodes
        The function receives a list of tuples containing the group and index of the node
        """

        picked_nodes = []
        for node_tuple in list_of_node_index:
            picked_nodes.append(self.nodes[node_tuple[0]][node_tuple[1]])

        match len(picked_nodes):
            case 0:
                return self.pick_first_set()
            case 1:
                return self.pick_second_set(picked_nodes[0])
            case 2:
                return self.pick_third_set(picked_nodes[0], picked_nodes[1])

    def pick_first_set(self):
        """
        Returns the list of nodes that has the most even spread
        """
        spread_values = []

        for node_list in self.nodes:
            spread_values.append(self.calculated_set_spread(node_list))

        index_best_set = 0

        for i, spread in enumerate(spread_values):
            if spread < spread_values[index_best_set]:
                index_best_set = i

        return self.nodes[index_best_set]

    def pick_second_set(self, picked_node):
        """
        Pick the best spread properties from all the outgoing edges from the chosen node
        """
        picked_node.edges.sort(reverse=True)

        spread_values = []

        for edge_list in picked_node.edges:
            # Skip the empty edge list
            if edge_list == []:
                continue

            weight_list = [edge.weight for edge in edge_list]
            spread = np.std(weight_list) * np.ptp(weight_list)
            spread_values.append(spread)

        index_best_set = 0

        for i, spread in enumerate(spread_values):
            if spread < spread_values[index_best_set]:
                index_best_set = i

        return [edge.node for edge in picked_node.edges[index_best_set]]

    def pick_third_set(self, first_node, second_node):
        """
        This function returns all the nodes
        that are in the first and second node
        """

        node_list = []
        for i in range(len(second_node.edges)):
            if i in (first_node.group, second_node.group):
                continue

            for edge in second_node.edges[i]:
                if edge in first_node.edges[i]:
                    node_list.append(edge.node)

        return node_list

    def calculated_set_spread(self, node_list):
        """
        Looks to all the weights form all edges of the node list
        and returns the spread of these weights.
        """
        weight_list = []

        for node in node_list:
            edge_list = []
            reduce(iconcat, node.edges, edge_list)
            weight_list += [edge.weight for edge in edge_list]

        return np.std(weight_list) * np.ptp(weight_list)

    def get_sign_ids(self, node_index_tuple_list):
        """ This function looks at all the sign id's that the chosen nodes have in common and returns a list with those id's"""

        picked_nodes = []
        for node_tuple in node_index_tuple_list:
            picked_nodes.append(self.nodes[node_tuple[0]][node_tuple[1]])

        # Get the last set as base list
        signs = picked_nodes[-1].sign_ids

        # Compare all list with sign id's except the last one because it was the Base
        # Sets the list to all the signs the current signs list and that of the next node have in common
        # A downside to this aproach is that we lose the ordering of the signs that was base on the frequency
        for i in range(len(picked_nodes)-1):
            signs = np.intersect1d(signs, picked_nodes[i].sign_ids)

        return signs

    def __eq__(self, other):
        if Graph != type(other):
            return False

        if self.nodes != other.nodes:
            return False

        return True

    def __str__(self):
        return_string = ""

        for node_list in self.nodes:
            for node in node_list:
                return_string = return_string + str(node) + "\n"

        return return_string


class Node:
    """
    This class represents a property in the graph
    It holds a list of edges that represent all
    the other properties that are used in the same sign as this property
    """

    def __init__(self, identifier, group, nr_of_sets=1):
        """
        Set values of a node, the number of sets is should be the same as in the graph
        This means that one list is empty because a node has no edges to the same group as itself
        The reason behind this is that it is now still possible to use the same group index as for the graph
        """
        self.identifier = identifier
        self.group = group
        self.edges = [[] for i in range(nr_of_sets)]
        self.sign_ids = []
        self.index = 0

    def add_edge(self, new_edge):
        """
        This method checks if this node already contains the same edge.
        This make sure there are no duplicate edges
        """
        group = new_edge.node.group
        for edge in self.edges[group]:
            if edge == new_edge:
                edge.weight += new_edge.weight
                return edge

        self.edges[group].append(new_edge)
        return new_edge

    def add_sign_id(self, sign_id):
        """
        Checks if a sign id is already pressent before adding it.
        This way there are no duplicate id's
        """
        if sign_id not in self.sign_ids:
            self.sign_ids.append(sign_id)

    def __eq__(self, other):
        if Node != type(other):
            return False

        if self.identifier != other.identifier:
            return False

        if self.group != other.group:
            return False

        if self.edges != other.edges:
            return False

        return True

    def __lt__(self, other):
        if Node != type(other):
            return False

        return self.group < other.group

    def __str__(self):
        return_string = f"Node Id:{self.identifier}, group:{self.group}, sign id's: {self.sign_ids}"
        for edge_list in self.edges:
            for edge in edge_list:
                return_string += f"\n       Edge: {edge}"

        return return_string


class Edge:
    """
    An edge represents the link between two properties that er used in the same sign
    """

    def __init__(self, node, weight):
        self.node = node
        self.weight = weight

    def __eq__(self, other):
        if Edge != type(other):
            return False

        # compare values of nodes instead of
        # nodes self to avoid possible infinite recursion
        if self.node.identifier != other.node.identifier:
            return False

        if self.node.group != other.node.group:
            return False

        return True

    def __lt__(self, other):
        if Edge != type(other):
            return False

        return (self.node.group, self.weight) < (other.node.group, other.weight)

    def __str__(self):
        return f"Weight:{self.weight}, \
               To: id:{self.node.identifier} group:{self.node.group}"
